{"version":3,"sources":["components/TabBar.js","components/TestAPI.js","App.js","reportWebVitals.js","index.js"],"names":["TabBar","useState","value","setValue","AppBar","position","Tabs","onChange","event","newValue","Tab","label","TestAPI","error","setError","isLoaded","setIsLoaded","item","setItem","useEffect","fetch","then","res","json","result","message","hello","onClick","App","to","path","About","Users","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAMe,SAASA,IACpB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OACI,8BACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CACIJ,MAASA,EACTK,SATK,SAACC,EAAOC,GACzBN,EAASM,IAMD,UAII,cAACC,EAAA,EAAD,CAAKC,MAAM,UACX,cAACD,EAAA,EAAD,CAAKC,MAAM,gBACX,cAACD,EAAA,EAAD,CAAKC,MAAM,iBACX,cAACD,EAAA,EAAD,CAAKC,MAAM,qBACX,cAACD,EAAA,EAAD,CAAKC,MAAM,oCC8BhBC,MAnDf,WACI,MAA0BX,mBAAS,MAAnC,mBAAOY,EAAP,KAAcC,EAAd,KACA,EAAgCb,oBAAS,GAAzC,mBAAOc,EAAP,KAAiBC,EAAjB,KAGA,EAAwBf,mBAAS,IAAjC,mBAAOgB,EAAP,KAAaC,EAAb,KA8BA,OApBAC,qBAAU,WAGNC,MAAM,+CACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACG,SAACG,GACGR,GAAY,GACZE,EAAQM,MAKZ,SAACX,GACGG,GAAY,GACZF,EAASD,QAGtB,IAECA,EACO,0CAAaA,EAAMY,WAClBV,EAIJ,0DAC4BE,EAAKS,MAC7B,8BACI,wBAAQC,QApCH,WACjBT,EAAQ,KAmCI,iCANL,8CCpCA,SAASU,IACpB,OACI,eAAC,IAAD,WACI,cAAC5B,EAAD,IACA,gCACI,8BACI,+BACI,6BACI,cAAC,IAAD,CAAM6B,GAAG,IAAT,oBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,WAAT,gCAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,SAAT,0BAOZ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,WAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACI,cAACC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,SAAZ,SACI,cAACE,EAAD,MAEJ,cAAC,IAAD,CAAOF,KAAK,IAAZ,SACI,cAACG,EAAD,eAQxB,SAASA,IACL,OAAO,sCAGX,SAASF,IACL,OAAO,uCAGX,SAASC,IACL,OAAO,uCCzDX,IAYeE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4f1b0ef6.chunk.js","sourcesContent":["import Tab from '@material-ui/core/Tab'\nimport Tabs from '@material-ui/core/Tabs'\nimport AppBar from '@material-ui/core/AppBar'\nimport React, { useState } from 'react'\nimport {set} from 'lodash'\n\nexport default function TabBar() {\n    const [value, setValue] = useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return(\n        <div>\n            <AppBar position=\"static\">\n                <Tabs\n                    value = {value}\n                    onChange = {handleChange}\n                >\n                    <Tab label=\"Users\"/>\n                    <Tab label=\"Ingredients\"/>\n                    <Tab label=\"GroceryLists\"/>\n                    <Tab label=\"User_Ingredients\"/>\n                    <Tab label=\"GroceryLists_Ingredients\"/>\n                </Tabs>\n            </AppBar>\n        </div>\n    )\n}\n\n","// Source for this AJAX code: https://reactjs.org/docs/faq-ajax.html\nimport { useState, useEffect } from 'react'\n\nfunction TestAPI() {\n    const [error, setError] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n\n    // This doesn't have to be called 'item'\n    const [item, setItem] = useState([])\n\n    // Callback function for button click, updates the state, clearing item\n    const goodbyeWorld = () => {\n        setItem(\"\")\n    }\n\n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n        //fetch(\"http://localhost:5000/api\")\n        // fetch(\"http://192.168.0.4:5000/api\")\n        fetch('https://quiet-brook-53041.herokuapp.com/api')\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true)\n                    setItem(result)\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true)\n                    setError(error)\n                }\n            )\n    }, [])\n\n    if (error) {\n        return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n        return <div>Loading...</div>\n    } else {\n        return (\n            <div>\n                Response from backend: {item.hello}\n                <div>\n                    <button onClick={goodbyeWorld}>Goodbye World!</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TestAPI\n","import { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\nimport './App.css'\nimport TabBar from './components/TabBar'\nimport TestAPI from './components/TestAPI.js'\n\nexport default function App() {\n    return (\n        <Router>\n            <TabBar/>\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to='/'>Home</Link>\n                        </li>\n                        <li>\n                            <Link to='/testAPI'>Test GET request</Link>\n                        </li>\n                        <li>\n                            <Link to='/about'>About</Link>\n                        </li>\n                        <li>\n                            <Link to='/users'>Users</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path='/testAPI'>\n                        <TestAPI />\n                    </Route>\n                    <Route path='/about'>\n                        <About />\n                    </Route>\n                    <Route path='/users'>\n                        <Users />\n                    </Route>\n                    <Route path='/'>\n                        <Home />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nfunction Home() {\n    return <h2>Home</h2>\n}\n\nfunction About() {\n    return <h2>About</h2>\n}\n\nfunction Users() {\n    return <h2>Users</h2>\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}