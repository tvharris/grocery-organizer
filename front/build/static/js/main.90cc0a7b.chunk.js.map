{"version":3,"sources":["components/TestAPI.js","App.js","reportWebVitals.js","index.js"],"names":["TestAPI","useState","error","setError","isLoaded","setIsLoaded","item","setItem","useEffect","fetch","then","res","json","result","message","hello","App","to","path","About","Users","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAyCeA,MAvCf,WACE,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAyBA,OApBAC,qBAAU,WAGRC,MAAM,uCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCR,GAAY,GACZE,EAAQM,MAKV,SAACX,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,0CAAaA,EAAMY,WAChBV,EAIR,0DAA6BE,EAAKS,SAH7B,8CC7BI,SAASC,IACtB,OACE,cAAC,IAAD,UACE,gCACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,WAAT,gCAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,0BAON,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,WAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,SAAZ,SACE,cAACE,EAAD,MAEF,cAAC,IAAD,CAAOF,KAAK,IAAZ,SACE,cAACG,EAAD,cAQZ,SAASA,IACP,OAAO,sCAGT,SAASF,IACP,OAAO,uCAGT,SAASC,IACP,OAAO,uCCvDT,IAYeE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.90cc0a7b.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nfunction TestAPI() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [item, setItem] = useState([]);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    //fetch(\"http://localhost:5000/api\")\n    //fetch(\"http://192.168.0.4:5000/api\")\n    fetch(\"quiet-brook-53041.herokuapp.com/api\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItem(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div>Response from backend: {item.hello}</div>\n    );\n  }\n}\n\nexport default TestAPI\n","import { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\nimport './App.css'\nimport TestAPI from './components/TestAPI.js'\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to='/'>Home</Link>\n            </li>\n            <li>\n              <Link to='/testAPI'>Test GET request</Link>\n            </li>\n            <li>\n              <Link to='/about'>About</Link>\n            </li>\n            <li>\n              <Link to='/users'>Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path='/testAPI'>\n            <TestAPI />\n          </Route>\n          <Route path='/about'>\n            <About />\n          </Route>\n          <Route path='/users'>\n            <Users />\n          </Route>\n          <Route path='/'>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nfunction Home() {\n  return <h2>Home</h2>\n}\n\nfunction About() {\n  return <h2>About</h2>\n}\n\nfunction Users() {\n  return <h2>Users</h2>\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}