{"version":3,"sources":["components/TestAPI.js","App.js","reportWebVitals.js","index.js"],"names":["TestAPI","useState","error","setError","isLoaded","setIsLoaded","item","setItem","useEffect","fetch","then","res","json","result","message","hello","onClick","TabPanel","props","children","value","index","other","role","hidden","id","Box","p","Typography","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","SimpleTabs","classes","React","setValue","className","AppBar","position","Tabs","onChange","event","newValue","Tab","label","About","Users","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAsDeA,MAnDf,WACE,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAGA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KA8BA,OApBAC,qBAAU,WAERC,MAAM,+BAEHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCR,GAAY,GACZE,EAAQM,MAKV,SAACX,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,0CAAaA,EAAMY,WAChBV,EAIR,0DAC0BE,EAAKS,MAC7B,8BACE,wBAAQC,QApCK,WACnBT,EAAQ,KAmCF,iCANC,8C,+BC9BX,SAASU,EAASC,GAChB,IAAQC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EAAnC,YAA6CJ,EAA7C,GAEA,OACE,6CACEK,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,0BAAqBJ,GACvB,uCAA+BA,IAC3BC,GALN,aAOGF,IAAUC,GACT,cAACK,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,cAACC,EAAA,EAAD,UAAaT,SAavB,SAASU,EAAUR,GACjB,MAAO,CACLI,GAAG,cAAD,OAAgBJ,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIxC,IAAMS,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAI/B,SAASC,IACtB,IAAMC,EAAUV,IAChB,EAA0BW,IAAMxC,SAAS,GAAzC,mBAAOmB,EAAP,KAAcsB,EAAd,KAMA,OACE,sBAAKC,UAAWH,EAAQP,KAAxB,UACE,cAACW,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CACE1B,MAAOA,EACP2B,SATa,SAACC,EAAOC,GAC3BP,EAASO,IASH,aAAW,sBAHb,UAKE,cAACC,EAAA,EAAD,aAAKC,MAAM,YAAetB,EAAU,KACpC,cAACqB,EAAA,EAAD,aAAKC,MAAM,YAAetB,EAAU,KACpC,cAACqB,EAAA,EAAD,aAAKC,MAAM,cAAiBtB,EAAU,UAG1C,cAACZ,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAA/B,SACE,cAAC+B,EAAD,MAEF,cAACnC,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAA/B,SACE,cAAC,EAAD,MAEF,cAACJ,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAA/B,SACE,cAACgC,EAAD,SAMR,SAASD,IACP,OAAO,uCAGT,SAASC,IACP,OAAO,uCC1FT,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.35a41ff5.chunk.js","sourcesContent":["// Source for this AJAX code: https://reactjs.org/docs/faq-ajax.html\nimport { useState, useEffect } from 'react'\n\nfunction TestAPI() {\n  const [error, setError] = useState(null)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  // This doesn't have to be called 'item'\n  const [item, setItem] = useState([])\n\n  // Callback function for button click, updates the state, clearing item\n  const goodbyeWorld = () => {\n    setItem(\"\")\n  }\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    // fetch(\"http://localhost:5000/api\")\n    fetch(\"http://192.168.0.4:5000/api\")\n    // fetch('https://quiet-brook-53041.herokuapp.com/api')\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true)\n          setItem(result)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true)\n          setError(error)\n        }\n      )\n  }, [])\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    return <div>Loading...</div>\n  } else {\n    return (\n      <div>\n        Response from backend: {item.hello}\n        <div>\n          <button onClick={goodbyeWorld}>Goodbye World!</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TestAPI\n","import './App.css'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport TestAPI from './components/TestAPI.js'\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  )\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}))\n\nexport default function SimpleTabs() {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label='simple tabs example'\n        >\n          <Tab label='Item One' {...a11yProps(0)} />\n          <Tab label='Item Two' {...a11yProps(1)} />\n          <Tab label='Item Three' {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <About />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <TestAPI />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Users />\n      </TabPanel>\n    </div>\n  )\n}\n\nfunction About() {\n  return <h2>About</h2>\n}\n\nfunction Users() {\n  return <h2>Users</h2>\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}