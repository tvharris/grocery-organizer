{"version":3,"sources":["components/Users.js","components/GroceryLists.js","components/Ingredients.js","components/FoodGroups.js","components/UserSelector.js","components/UserIngredients.js","components/GroceryListIngredients.js","App.js","reportWebVitals.js","index.js"],"names":["Users","useState","data","setData","useEffect","fetch","then","res","json","Container","maxWidth","title","columns","field","hidden","editable","onRowUpdate","newData","oldData","Promise","resolve","method","headers","body","JSON","stringify","response","ok","Error","status","updatedData","console","log","catch","error","handleRowUpdate","onRowAdd","dbRow","dataToAdd","push","handleRowAdd","onRowDelete","rows","index","tableData","id","splice","handleRowDelete","GroceryLists","userData","setUserData","lookup","type","arr","usernames","forEach","row","username","arrayToObject","dataDelete","Ingredients","ingredients","setIngredients","foodGroups","setFoodGroups","name","ingredientUpate","FoodGroups","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","SimpleSelect","users","selectedUser","setSelectedUser","classes","FormControl","className","InputLabel","Select","labelId","value","onChange","event","target","map","u","MenuItem","userID","UserIngredients","setUsers","ingredientToID","setIngredientToID","userIngredients","ingredientID","createIngredientToID","class","style","textAlign","ingredientToAdd","ingredientToDelete","GroceryListIngredients","GroceryListData","setGroceryListData","selectedList","setSelectedList","marginBottom","Grid","container","item","xs","options","rowStyle","rowData","backgroundColor","listID","actions","icon","onClick","loadUserGroceryList","updatedList","TabPanel","props","children","other","role","Box","p","Typography","a11yProps","root","flexGrow","palette","background","paper","SimpleTabs","React","setValue","AppBar","position","Tabs","newValue","Tab","label","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cf4e690.chunk.js","sourcesContent":["import MaterialTable from 'material-table'\nimport { useState, useEffect } from 'react'\nimport Container from '@material-ui/core/Container'\n\nexport default function Users() {\n\n    var columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'Email', field: 'email' },\n        { title: 'Username', field: 'username' },\n    ]\n\n    const [data, setData] = useState([])\n\n    /*fetch users on load*/\n    useEffect(() => {\n        /*load the user's database info*/\n        fetch('/users')\n            .then(res => res.json())\n            .then(res => setData(res))\n    }, [])\n\n    const handleRowAdd = (newData, resolve) => {\n        fetch('/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n            .then((dbRow) => {\n                console.log('Row Added:', dbRow)\n                setData([...data, ...dbRow])\n                resolve()\n            })\n            .catch((error) => {\n                console.log('Error:', error)\n                resolve()\n            })\n\n        let dataToAdd = [...data]\n        dataToAdd.push(newData)\n        setData(dataToAdd)\n        resolve()\n    }\n\n    const handleRowUpdate = (newData, oldData, resolve) => {\n        fetch('/users', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n\n            // Only update front end following a successful update to the backend\n            .then((updatedData) => {\n                console.log(\"update successful\")\n                setData([...updatedData])\n                resolve()\n            })\n            .catch((error) => {\n                console.log('Error:', error)\n                resolve()\n            })\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        fetch('/users', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(oldData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n            })\n\n            // If the update was successful then remove the values from the front end\n            .then(() => {\n                console.log('Success')\n                // update the table in the front-end\n                const rows = [...data]\n                const index = oldData.tableData.id\n                rows.splice(index, 1)\n                setData(rows)\n                resolve()\n            })\n            .catch((error) => {\n                console.log('Error:', error)\n                resolve()\n            })\n    }\n\n    return (\n        <div>\n            <Container maxWidth='sm'>\n                <MaterialTable\n                    title='Users'\n                    columns={columns}\n                    data={data}\n                    editable={{\n                        onRowUpdate: (newData, oldData) =>\n                            new Promise((resolve) => {\n                                handleRowUpdate(newData, oldData, resolve)\n                            }),\n                        onRowAdd: (newData) =>\n                            new Promise((resolve) => {\n                                handleRowAdd(newData, resolve)\n                            }),\n                        onRowDelete: (oldData) =>\n                            new Promise((resolve) => {\n                                handleRowDelete(oldData, resolve)\n                            }),\n                    }}\n                />\n            </Container>\n        </div>\n    )\n}\n","import MaterialTable from 'material-table'\nimport { useState, useEffect } from 'react'\nimport Container from '@material-ui/core/Container'\n\nexport default function GroceryLists() {\n    // data for the grocery list table\n    const [data, setData] = useState([])\n    // data for the username lookup (i.e., dropdown)\n    const [userData, setUserData] = useState({})\n\n    var columns = [\n        { title: 'id', field: 'listID', hidden: true },\n        { title: 'Username', field: 'username', lookup: userData },\n        // date is not editable because in the back-end we use the current datetime\n        { title: 'Date', field: 'listDate', type: 'date', editable: 'never' },\n    ]\n\n    // convert array of table rows to object for lookup - {username:username}\n    function arrayToObject(arr) {\n        let usernames = {}\n        arr.forEach((row) => {\n            usernames[row.username] = row.username\n        })\n        return usernames\n    }\n\n    // fetch grocery_lists and users on load\n    useEffect(() => {\n        // load the grocery list info\n        fetch('/grocery_lists')\n            .then((res) => res.json())\n            .then((res) => setData(res))\n        // load the user info for the lookup (i.e., dropdown)\n        fetch('/users')\n            .then((res) => res.json())\n            .then((res) => setUserData(arrayToObject(res)))\n    }, [])\n\n    const handleRowAdd = (newData, resolve) => {\n        fetch('/grocery_lists', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            // check for error before moving forward with response\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n\n            // code added to the backend to return new row added\n            .then((dbRow) => {\n                setData([...data, ...dbRow])\n                resolve()\n            })\n\n            // catch error if retrieval of added row failed.\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n\n\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n\n        // Make an initial DELETE request to the back end.\n        fetch('/grocery_lists', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(oldData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n            })\n\n            // If the request was succesfull then update the front end to represent the new data\n            .then(() => {\n                console.log('Success')\n                const dataDelete = [...data]\n                const index = oldData.tableData.id\n                dataDelete.splice(index, 1)\n                setData([...dataDelete])\n                resolve()\n            })\n            .catch((error) => {\n                console.log('Error:', error)\n                resolve()\n            })\n\n    }\n\n    return (\n        <div>\n            <Container maxWidth='sm'>\n                <MaterialTable\n                    title='Grocery Lists'\n                    columns={columns}\n                    data={data}\n                    editable={{\n                        onRowAdd: (newData) =>\n                            new Promise((resolve) => {\n                                // let listDate = new Date().toISOString().slice(0, 19).replace('T', ' ');\n                                // newData['listDate'] = listDate\n                                handleRowAdd(newData, resolve)\n                            }),\n                        onRowDelete: (oldData) =>\n                            new Promise((resolve) => {\n                                handleRowDelete(oldData, resolve)\n                            }),\n                    }}\n                />\n            </Container>\n        </div>\n    )\n}\n","import MaterialTable from 'material-table'\nimport { useState, useEffect } from 'react'\nimport Container from '@material-ui/core/Container'\n\nexport default function Ingredients() {\n    // initialize state variables and update functions for table data\n    // and foodGroup selector\n    const [ingredients, setIngredients] = useState([])\n    const [foodGroups, setFoodGroups] = useState({})\n\n    var columns = [\n        { title: 'Ingredient', field: 'name' },\n        { title: 'id', field: 'ingredientID', hidden: true },\n        { title: 'Food Group', field: 'fgname', lookup: foodGroups },\n    ]\n\n    // convert array of table rows to object for foodGroup selector - {name:name}\n    function arrayToObject(arr) {\n        let foodGroups = {}\n        arr.forEach((row) => {\n            foodGroups[row.name] = row.name\n        })\n        foodGroups[null] = 'none'\n        return foodGroups\n    }\n\n    // fetch data from db on component load\n    useEffect(() => {\n        // table data\n        fetch('/ingredients')\n            .then((res) => res.json())\n            .then((res) => setIngredients(res))\n\n        // food group selector data\n        fetch('/food_group')\n            .then((res) => res.json())\n            .then((res) => setFoodGroups(arrayToObject(res)))\n    }, [])\n\n    const handleRowAdd = (newData, resolve) => {\n        console.log('newData:', newData)\n        fetch('/ingredients', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n            .then((dbRow) => {\n                console.log('Success:', dbRow)\n                // update the table with the new row\n                setIngredients([...ingredients, ...dbRow])\n                resolve()\n            })\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n    }\n\n    const handleRowUpdate = (newData, oldData, resolve) => {\n        console.log(newData)\n        fetch('/ingredients', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            .then((data) => data.json())\n            .then(() => {\n                console.log('Success')\n                // update the table in the front-end\n                const ingredientUpate = [...ingredients]\n                const index = oldData.tableData.id\n                ingredientUpate[index] = newData\n                setIngredients([...ingredientUpate])\n                resolve()\n            })\n            .catch((error) => {\n                console.log('Error:', error)\n                resolve()\n            })\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        fetch('/ingredients', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(oldData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n            })\n            .then(() => {\n                console.log('Success')\n                // update the table in the front-end\n                const rows = [...ingredients]\n                const index = oldData.tableData.id\n                rows.splice(index, 1)\n                setIngredients(rows)\n                resolve()\n            })\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n    }\n\n    return (\n        <div>\n            <Container maxWidth='sm'>\n                <MaterialTable\n                    title='Ingredients'\n                    columns={columns}\n                    data={ingredients}\n                    editable={{\n                        onRowUpdate: (newData, oldData) =>\n                            new Promise((resolve) => {\n                                handleRowUpdate(newData, oldData, resolve)\n                            }),\n                        onRowAdd: (newData) =>\n                            new Promise((resolve) => {\n                                handleRowAdd(newData, resolve)\n                            }),\n                        onRowDelete: (oldData) =>\n                            new Promise((resolve) => {\n                                handleRowDelete(oldData, resolve)\n                            }),\n                    }}\n                />\n            </Container>\n        </div>\n    )\n}\n","import MaterialTable from 'material-table'\nimport Container from '@material-ui/core/Container'\nimport { useState, useEffect } from 'react'\n\nexport default function FoodGroups() {\n    var columns = [\n        { title: 'id', field: 'foodGroupID', hidden: true },\n        { title: 'Food Group', field: 'name' },\n    ]\n\n    // initialize state variable and update function for table data\n    const [data, setData] = useState([])\n\n    // fetch data from db on component load\n    useEffect(() => {\n        fetch('/food_group')\n            .then((res) => res.json())\n            .then((res) => setData(res))\n    }, [])\n\n    const handleRowAdd = (newData, resolve) => {\n        fetch('/food_group', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n            .then((dbRow) => {\n                console.log('Success:', dbRow)\n                // update the table with the new row\n                setData([...data, ...dbRow])\n                resolve()\n            })\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n    }\n\n    const handleRowUpdate = (newData, oldData, resolve) => {\n        fetch('/food_group', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n            })\n            .then(() => {\n                console.log('Success')\n                // update the table in the front-end\n                const rows = [...data]\n                const index = oldData.tableData.id\n                rows[index] = newData\n                setData(rows)\n                resolve()\n            })\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        fetch('/food_group', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(oldData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n            })\n            .then(() => {\n                console.log('Success')\n                // update the table in the front-end\n                const rows = [...data]\n                const index = oldData.tableData.id\n                rows.splice(index, 1)\n                setData(rows)\n                resolve()\n            })\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n    }\n\n    return (\n        <div>\n            <Container maxWidth='sm'>\n                <MaterialTable\n                    title='Food Groups'\n                    columns={columns}\n                    data={data}\n                    editable={{\n                        onRowUpdate: (newData, oldData) =>\n                            new Promise((resolve) => {\n                                handleRowUpdate(newData, oldData, resolve)\n                            }),\n                        onRowAdd: (newData) =>\n                            new Promise((resolve) => {\n                                handleRowAdd(newData, resolve)\n                            }),\n                        onRowDelete: (oldData) =>\n                            new Promise((resolve) => {\n                                handleRowDelete(oldData, resolve)\n                            }),\n                    }}\n                />\n            </Container>\n        </div>\n    )\n}\n","import { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function SimpleSelect({ users, selectedUser, setSelectedUser }) {\n\n    const classes = useStyles();\n    const handleChange = (event) => {\n        setSelectedUser(event.target.value);\n    };\n\n    return (\n        <div>\n        <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">Select User</InputLabel>\n        <Select\n        labelId=\"demo-simple-select-label\"\n        id=\"demo-simple-select\"\n        value={selectedUser}\n        onChange={handleChange}\n        >\n        {users.map((u) => (<MenuItem value={u.userID}>{u.username}</MenuItem>))}\n        </Select>\n        </FormControl>\n        </div>\n    );\n}\n","import MaterialTable from 'material-table'\nimport { useState, useEffect } from 'react'\nimport Container from '@material-ui/core/Container'\nimport UserSelector from './UserSelector'\n\nexport default function UserIngredients() {\n    // State for the Users\n    const [users, setUsers] = useState([])\n\n    // State for user selector\n    const [selectedUser, setSelectedUser] = useState('')\n\n    // State for UserIngredients\n    const [data, setData] = useState([])\n\n    // State for ingredient selector\n    const [ingredients, setIngredients] = useState({})\n\n    // State for object used for name -> ID conversion\n    const [ingredientToID, setIngredientToID] = useState({})\n\n    var columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'Ingredient', field: 'name', lookup: ingredients },\n    ]\n\n    // convert array of table rows to object for ingredient selector - {name:name}\n    function arrayToObject(arr) {\n        let ingredients = {}\n        arr.forEach((row) => {\n            ingredients[row.name] = row.name\n        })\n        return ingredients\n    }\n\n    // create the object used for converting a selected ingredient name to an ID\n    function createIngredientToID(arr) {\n        let ingredientToID = {}\n        arr.forEach((row) => {\n            ingredientToID[row.name] = row.ingredientID\n        })\n        return ingredientToID\n    }\n\n    useEffect(() => {\n        // only get ingredients if a user is selected\n        if (selectedUser !== '') {\n            fetch(`/user_ingredients/${selectedUser}`)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(`Status code: ${response.status}`)\n                    }\n                    return response.json()\n                })\n                .then((userIngredients) => setData(userIngredients))\n                .catch((error) => {\n                    console.log(error)\n                })\n        }\n    }, [selectedUser]) // fetch every time selectedUser changes\n\n    // fetch data from db on component load\n    useEffect(() => {\n        // user data for user selector\n        fetch('/users')\n            .then((res) => res.json())\n            .then((res) => setUsers(res))\n\n        // ingredient data for ingredient selector\n        // and for IngredientToID object\n        fetch('/ingredients')\n            .then((res) => res.json())\n            .then((res) => {\n                setIngredients(arrayToObject(res))\n                setIngredientToID(createIngredientToID(res))\n            })\n    }, [])\n\n    const handleRowAdd = (newData, resolve) => {\n        // newData can't be sent as is because it has the ingredient name\n        // the back-end expects the ingredientID\n        let ingredientToAdd = { ingredientID: ingredientToID[newData.name] }\n        fetch(`/user_ingredients/${selectedUser}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(ingredientToAdd),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n            .then((userIngredients) => {\n                console.log('Success:', userIngredients)\n                // update the table in the front-end\n                setData(userIngredients)\n                resolve()\n            })\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        let ingredientToDelete = { ingredientID: ingredientToID[oldData.name] }\n        fetch(`/user_ingredients/${selectedUser}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(ingredientToDelete),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n            })\n            .then(() => {\n                console.log('Success')\n                // update the table in the front-end\n                const rows = [...data]\n                const index = oldData.tableData.id\n                rows.splice(index, 1)\n                setData(rows)\n                resolve()\n            })\n            .catch((error) => {\n                console.log(error)\n                resolve()\n            })\n    }\n\n    return (\n        <div>\n            <Container maxWidth='sm'>\n                <h6\n                    class='MuiTypography-h6'\n                    style={{ margin: 0, textAlign: 'center' }}\n                >\n                    Select a User to View Their Ingredients\n                </h6>\n\n                {/* User Selector */}\n                <UserSelector\n                    users={users}\n                    setUsers={setUsers}\n                    selectedUser={selectedUser}\n                    setSelectedUser={setSelectedUser}\n                />\n\n                <br></br>\n\n                {/* Table Elements */}\n                <MaterialTable\n                    title='User Ingredients'\n                    columns={columns}\n                    data={data}\n                    editable={{\n                        onRowAdd: (newData) =>\n                            new Promise((resolve) => {\n                                handleRowAdd(newData, resolve)\n                            }),\n                        onRowDelete: (oldData) =>\n                            new Promise((resolve) => {\n                                handleRowDelete(oldData, resolve)\n                            }),\n                    }}\n                />\n            </Container>\n        </div>\n    )\n}\n","import MaterialTable from 'material-table'\nimport { useState, useEffect } from 'react'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\n\nexport default function GroceryListIngredients() {\n    var GroceryListColumns = [\n        { title: 'id', field: 'listID', hidden: true },\n        {\n            title: 'Username',\n            field: 'username',\n        },\n        { title: 'Date', field: 'listDate', type: 'date' },\n    ]\n\n    // the list of all user grocery lists\n    const [GroceryListData, setGroceryListData] = useState([])\n\n    // the currently selected list (for the purposes of dat)\n    const [selectedList, setSelectedList] = useState()\n\n    // the set of possible incredients\n    const [ingredients, setIngredients] = useState([])\n\n\n    // convert array of table rows to object for foodGroup selector - {name:name}\n    function arrayToObject(arr) {\n        let ingredients = {}\n        arr.forEach((row) => {\n            ingredients[row.name] = row.name\n        })\n        return ingredients\n    }\n\n    var columns = [\n        // Primary key actually isn't a single id - need to consider this more\n        { title: 'id', field: 'id', hidden: true },\n        {\n            title: 'Ingredient',\n            field: 'name',\n            lookup: ingredients,\n        },\n    ]\n    /*fetch grocery_lists on load*/\n    useEffect(() => {\n\n        /*load the user's database info*/\n        fetch('/grocery_lists')\n            .then((res) => res.json())\n            .then((res) => setGroceryListData(res))\n\n        // Load potential ingredients to be added\n        fetch('/ingredients')\n            .then((res) => res.json())\n            .then((res) => setIngredients(arrayToObject(res)))\n    }, [])\n\n    const [data, setData] = useState([])\n\n    const handleRowAdd = (newData, resolve) => {\n        fetch(`/grocery_list_ingredients/${selectedList}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newData),\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n            .then((updatedList) => {\n                console.log(\"update successful\")\n                setData([...updatedList])\n                resolve()\n            })\n            .catch((error) => {\n                console.log('Error:', error)\n                resolve()\n            })\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        fetch(`/grocery_list_ingredients/${selectedList}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(oldData),\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`Status code: ${response.status}`)\n                }\n                return response.json()\n            })\n            .then(() => {\n                console.log('Success')\n                // update the table in the front-end\n                const rows = [...data]\n                const index = oldData.tableData.id\n                rows.splice(index, 1)\n                setData(rows)\n                resolve()\n            })\n            .catch((error) => {\n                console.log('Error:', error)\n                resolve()\n            })\n    }\n\n    const loadUserGroceryList = (rowData) => {\n        fetch(`/grocery_list_ingredients/${rowData.listID}`)\n            .then((res) => res.json())\n            .then((res) => setData([...res]))\n            .then(() => {\n                setSelectedList(rowData.listID)\n            })\n    }\n\n    return (\n        <div>\n            <Container>\n                <h6\n                    class='MuiTypography-h6'\n                    style={{\n                        marginTop: 0,\n                        marginBottom: '1.5rem',\n                        textAlign: 'center',\n                    }}\n                >\n                    Select a Grocery List to View Its Ingredients\n                </h6>\n                <Grid container spacing={3}>\n                    <Grid item xs={6}>\n                        <MaterialTable\n                            title='Select a Grocery List'\n                            columns={GroceryListColumns}\n                            data={GroceryListData}\n                            options={{\n                                rowStyle: rowData => ({\n                                    backgroundColor: (selectedList === rowData.listID) ? '#EEE' : '#FFF'\n                                })\n                            }}\n                            actions={[\n                                {\n                                    icon: '>',\n                                    onClick: (event, rowData) => {\n                                        loadUserGroceryList(rowData)\n                                    },\n                                },\n                            ]}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <MaterialTable\n                            title='Selected List'\n                            columns={columns}\n                            data={data}\n                            editable={{\n                                onRowAdd: (newData) =>\n                                    new Promise((resolve) => {\n                                        handleRowAdd(newData, resolve)\n                                    }),\n                                onRowDelete: (oldData) =>\n                                    new Promise((resolve) => {\n                                        handleRowDelete(oldData, resolve)\n                                    }),\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n","import './App.css'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport Users from './components/Users'\nimport GroceryLists from './components/GroceryLists'\nimport Ingredients from './components/Ingredients'\nimport FoodGroups from './components/FoodGroups'\nimport UserIngredients from './components/UserIngredients'\nimport GroceryListIngredients from './components/GroceryListIngredients'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    )\n}\n\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}))\n\nexport default function SimpleTabs() {\n    const classes = useStyles()\n    const [value, setValue] = React.useState(0)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position='static'>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    aria-label='simple tabs example'\n                >\n                    <Tab label='Users' {...a11yProps(0)} />\n                    <Tab label='Grocery Lists' {...a11yProps(1)} />\n                    <Tab label='Ingredients' {...a11yProps(2)} />\n                    <Tab label='Food Groups' {...a11yProps(3)} />\n                    <Tab label='User Ingredients' {...a11yProps(4)} />\n                    <Tab label='Grocery-List Ingredients' {...a11yProps(5)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                <Users />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <GroceryLists />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <Ingredients />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n                <FoodGroups/>\n            </TabPanel>\n            <TabPanel value={value} index={4}>\n                <UserIngredients />\n            </TabPanel>\n            <TabPanel value={value} index={5}>\n                <GroceryListIngredients />\n            </TabPanel>\n        </div>\n    )\n}\n\n// function About() {\n//   return <h2>About</h2>\n// }\n\n// function Users() {\n//   return <h2>Users</h2>\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}